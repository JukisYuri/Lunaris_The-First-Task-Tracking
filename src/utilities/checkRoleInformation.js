const { splitMessage } = require("../helpers/split_message");

async function checkRoleInformation(message, roleId) {
    try {
        const role = message.guild.roles.cache.get(roleId)

        const permissions = role.permissions.toArray()
        const permissionsText = permissions.length > 0 ? permissions.join(', ') : "Kh√¥ng c√≥ quy·ªÅn n√†o"

        const fetchedMembers = await message.guild.members.fetch()
        const membersWithRole = fetchedMembers
                                            .filter(member => member.roles.cache.has(role.id))
                                            .map(member => `\`${member.user.username}\``) // Ph√° markdown c·ªßa discord
                                            .join(", ") || "Kh√¥ng c√≥ ai";

        // L·∫•y danh s√°ch member nh·∫≠n role trong v√≤ng 1 ng√†y ƒë·∫ßu ti√™n
        const oneDayAfterCreation = new Date(role.createdAt);
        oneDayAfterCreation.setDate(oneDayAfterCreation.getDate() + 1);

        const membersJoinedEarlyDay = fetchedMembers
                                            .filter(member => member.roles.cache.has(role.id) && member.joinedAt <= oneDayAfterCreation)
                                            .map(member => `\`${member.user.username}\``)
                                            .join(", ") || "Kh√¥ng c√≥ ai";

        // L·∫•y danh s√°ch member nh·∫≠n role trong v√≤ng 1 th√°ng ƒë·∫ßu ti√™n
        const oneMonthAfterCreation = new Date(role.createdAt);
        oneMonthAfterCreation.setMonth(oneMonthAfterCreation.getMonth() + 1);

        const membersJoinedEarlyMonth = fetchedMembers
                                            .filter(member => member.roles.cache.has(role.id) && member.joinedAt <= oneMonthAfterCreation)
                                            .map(member => `\`${member.user.username}\``)
                                            .join(", ") || "Kh√¥ng c√≥ ai";  
        
        // L·∫•y danh s√°ch member nh·∫≠n role trong v√≤ng 1 nƒÉm ƒë·∫ßu ti√™n
        const oneYearAfterCreation = new Date(role.createdAt);
        oneYearAfterCreation.setFullYear(oneYearAfterCreation.getFullYear() + 1);

        const membersJoinedEarlyYear = fetchedMembers
                                            .filter(member => member.roles.cache.has(role.id) && member.joinedAt <= oneYearAfterCreation)
                                            .map(member => `\`${member.user.username}\``)
                                            .join(", ") || "Kh√¥ng c√≥ ai";
        // -------------------------------
        // X√°c ƒë·ªãnh ng∆∞·ªùi s·ªü h·ªØu role l√¢u nh·∫•t v√† ng∆∞·ªùi s·ªü h·ªØu role ƒë·∫ßu ti√™n d·ª±a v√†o th·ªùi gian tham gia server
        const membersWithRoleArray = fetchedMembers.filter(member => member.roles.cache.has(role.id));
        // S·∫Øp x·∫øp theo th·ªùi gian tham gia server (joinedTimestamp: s·ªë ms k·ªÉ t·ª´ epoch)
        const sortedMembersByJoin = Array.from(membersWithRoleArray.values())
            .sort((a, b) => a.joinedTimestamp - b.joinedTimestamp);

        // Ng∆∞·ªùi s·ªü h·ªØu role l√¢u nh·∫•t (sinh vi√™n v√†o server s·ªõm nh·∫•t)
        const longestOwnedMember = sortedMembersByJoin.length > 0 ? sortedMembersByJoin[0].user.username : "Kh√¥ng c√≥ ai";
        
        // Ng∆∞·ªùi s·ªü h·ªØu role ƒë·∫ßu ti√™n (ng∆∞·ªùi ƒë∆∞·ª£c g√°n role sau khi role ƒë∆∞·ª£c t·∫°o)
        // Ta l·∫•y nh·ªØng th√†nh vi√™n m√† th·ªùi gian tham gia (joinedAt) sau th·ªùi gian t·∫°o role, sau ƒë√≥ ch·ªçn ng∆∞·ªùi tham gia s·ªõm nh·∫•t.
        const membersAssignedAfterCreation = sortedMembersByJoin.filter(member => member.joinedAt > role.createdAt);
        const firstAssignedMember = membersAssignedAfterCreation.length > 0 ? membersAssignedAfterCreation[0].user.username : longestOwnedMember;
        // Sau ƒë√≥, khi hi·ªÉn th·ªã, b·ªçc b·∫±ng backticks
        const formattedLongestOwnedMember = `\`${longestOwnedMember}\``;
        const formattedFirstAssignedMember = `\`${firstAssignedMember}\``;
        
        //------------------------------
        const sortedRoles = [...message.guild.roles.cache.values()]
                                                         .sort((a, b) => b.position - a.position); // S·∫Øp x·∫øp theo th·ª© t·ª± t·ª´ cao ƒë·∫øn th·∫•p

        const roleIndex = sortedRoles.findIndex(r => r.id === role.id);
        const higherRole = roleIndex > 0 ? sortedRoles[roleIndex - 1].name : "Kh√¥ng c√≥";
        const lowerRole = roleIndex < sortedRoles.length - 1 ? sortedRoles[roleIndex + 1].name : "Kh√¥ng c√≥";

        const totalAllRoles = message.guild.roles.cache.size
        const displayPositionRole = totalAllRoles - role.position // V√¨ c√°ch t√≠nh role c·ªßa discord h∆°i ng∆∞·ª£c

        const roleInfo = `**üìá Th√¥ng tin Role:**\n` +
        `- **T√™n:** ${role.name}\n` +
        `- **ID:** ${role.id}\n` +
        `- **Thu·ªôc guild:** ${role.guild}\n` +
        `- **Ng√†y ƒë∆∞·ª£c t·∫°o:** ${role.createdAt.toLocaleDateString("vi-VN")}\n` +
        `- **M√£ m√†u:** ${role.hexColor}\n` +
        `- **Bot c√≥ th·ªÉ ch·ªânh s·ª≠a role:** ${role.editable ? 'c√≥' : 'kh√¥ng'}\n` +
        `- **Vai tr√≤ ri√™ng bi·ªát:** ${role.hoist ? 'c√≥' : 'kh√¥ng'}\n` +
        `- **C√≥ th·ªÉ ƒë∆∞·ª£c mention:** ${role.mentionable ? 'c√≥' : 'kh√¥ng'}\n` +
        `- **V·ªã tr√≠ trong guild:** ${displayPositionRole}\n` +
        `- **Role cao h∆°n:** ${higherRole}\n` +
        `- **Role th·∫•p h∆°n:** ${lowerRole}\n` +
        `- **Quy·ªÅn h·∫°n:** ${permissionsText}\n` +
        `- **Nh·ªØng ng∆∞·ªùi s·ªü h·ªØu role ·ªü hi·ªán t·∫°i:** ${membersWithRole}\n\n` +

        `üëÅ‚Äçüó® **Nh·ªØng ng∆∞·ªùi s·ªü h·ªØu role**\n` +
        `- **S·ªõm nh·∫•t:** ${formattedFirstAssignedMember}\n` +
        `- **L√¢u nh·∫•t:** ${formattedLongestOwnedMember}\n` +
        `- **Ng√†y ƒë·∫ßu ti√™n:** ${membersJoinedEarlyDay}\n` +
        `- **Th√°ng ƒë·∫ßu ti√™n:** ${membersJoinedEarlyMonth}\n` +
        `- **NƒÉm ƒë·∫ßu ti√™n:** ${membersJoinedEarlyYear}\n` 

        const formatInfo = splitMessage(roleInfo)
        for (const chunk of formatInfo){
        await message.reply(chunk)
        }
    } catch (error) {
        console.error(error)
        await message.reply('‚ùå ƒê√£ x·∫£y ra l·ªói khi nh·∫≠p')
    }
}

module.exports = { checkRoleInformation }