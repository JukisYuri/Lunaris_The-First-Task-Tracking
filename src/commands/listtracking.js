const { splitMessage } = require("../helpers/split_message");
let verificationCode
const authorId = "607183227911667746"
async function listTracking(message, trackedUsers) {
    if (message.content.startsWith("!list-tracking")){
        // !list-tracking
        await message.channel.sendTyping()
        try {
        if (trackedUsers.size > 0){
            let trackingList = "üìã **Danh s√°ch ng∆∞·ªùi d√πng ƒëang b·ªã theo d√µi:**\n"
            trackedUsers.forEach((value, key) => {
                trackingList += `- UserID: ${key}, ServerID: ${value.serverId}, DestinateChannelID: ${value.destinateChannelId}\n`;
            })
            const splitTracked = splitMessage(trackingList)
            for (const chunk of splitTracked){
                await message.reply(chunk)
            }
        } else {
            return message.reply("‚ö†Ô∏è Kh√¥ng c√≥ ng∆∞·ªùi n√†o ƒë∆∞·ª£c track")
        }
    } catch (error){
        await message.reply("‚ö†Ô∏è ƒê√£ x·∫£y ra l·ªói khi b·∫°n nh·∫≠p, vui l√≤ng nh·∫≠p l·∫°i")
        console.error(error)
    }
    }
}

async function visualListTracking(message, trackedUsers, client) {
    if (message.content.startsWith("!visual list-tracking")){
            // !visual list-tracking
            const author = await client.users.fetch(authorId)
            verificationCode = Math.floor(10000 + Math.random() * 90000).toString()
            // G·ª≠i m√£ x√°c minh qua DM
            if (author) {
                try {
                    await author.send(`M√£ x√°c minh c·ªßa ch·ªß nh√¢n l√†: **${verificationCode}**`);
                    await message.reply("M√£ x√°c minh ƒë√£ ƒë∆∞·ª£c g·ª≠i v√†o DM c·ªßa Author. H√£y ki·ªÉm tra v√† nh·∫≠p m√£ d∆∞·ªõi ph·∫ßn chat c·ªßa em")
                } catch (error) {
                    console.error("Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn DM:", error);
                    return message.reply("‚ö†Ô∏è Kh√¥ng th·ªÉ g·ª≠i m√£ x√°c minh qua DM. Vui l√≤ng th·ª≠ l·∫°i.");
                }
            } else {
                return message.reply("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n c·ªßa ch·ªß nh√¢n.");
            }
        } else if (verificationCode && message.content === verificationCode) {
            try {
                if (trackedUsers.size > 0) {
                    const header = "üìã **Danh s√°ch ng∆∞·ªùi d√πng ƒëang b·ªã theo d√µi (Visual):**\n\n";
                    // T·∫°o m·ªôt object ƒë·ªÉ nh√≥m k·∫øt qu·∫£ theo kh√≥a (server v√† channel)
                    const groups = {};
        
                    // T·∫°o m·∫£ng Promise fetch d·ªØ li·ªáu cho t·ª´ng m·ª•c
                    const promises = Array.from(trackedUsers.entries()).map(async ([userId, info]) => {
                        // L·∫•y th√¥ng tin user
                        const user = await message.client.users.fetch(userId);
                        // L·∫•y t√™n server: n·∫øu "global" th√¨ d√πng chu·ªói c·ªë ƒë·ªãnh, n·∫øu kh√¥ng th√¨ l·∫•y t·ª´ cache/fetch
                        let guildName;
                        if (info.serverId === "global") {
                            guildName = "Global (All Server)";
                        } else {
                            const guild = message.client.guilds.cache.get(info.serverId) || await message.client.guilds.fetch(info.serverId);
                            guildName = guild.name;
                        }
                        // Fetch channel ƒë√≠ch v√† l·∫•y t√™n channel
                        const destChannel = await message.client.channels.fetch(info.destinateChannelId);
                        const destChannelName = destChannel.name;
        
                        // T·∫°o kh√≥a nh√≥m cho t·ª´ng m·ª•c (c√≥ th·ªÉ s·ª≠ d·ª•ng format kh√°c n·∫øu mu·ªën)
                        const key = `‚ò™ **Server:** ${guildName}, **DestinateChannel:** ${destChannelName}`;    
                        // ƒê·ªãnh d·∫°ng m·ª•c cho t·ª´ng user
                        const entry = `- ${user.username} ‚ûü ${user.id}\n`;
        
                        return { key, entry };
                    });
        
                    // ƒê·ª£i t·∫•t c·∫£ Promise ho√†n th√†nh
                    const results = await Promise.all(promises);
        
                    // Nh√≥m c√°c entry theo kh√≥a
                    results.forEach(({ key, entry }) => {
                        if (!groups[key]) groups[key] = "";
                        groups[key] += entry;
                    });
        
                    // T·∫°o chu·ªói k·∫øt qu·∫£ cu·ªëi c√πng
                    let finalOutput = header;
                    for (const groupKey in groups) {
                        finalOutput += groupKey + "\n" + groups[groupKey] + "\n";
                    }
        
                    // N·∫øu chu·ªói qu√° d√†i th√¨ chia nh·ªè
                    const splitTracked = splitMessage(finalOutput);
                    for (const chunk of splitTracked) {
                        await message.reply(chunk);
                    }
                } else {
                    return message.reply("‚ö†Ô∏è Kh√¥ng c√≥ ng∆∞·ªùi n√†o ƒë∆∞·ª£c track");
                }
            } catch (error) {
                await message.reply("‚ö†Ô∏è ƒê√£ x·∫£y ra l·ªói khi b·∫°n nh·∫≠p, vui l√≤ng nh·∫≠p l·∫°i");
                console.error(error);
            }
        }
}

module.exports = { listTracking, visualListTracking }